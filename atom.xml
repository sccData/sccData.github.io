<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>scc技术博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-09-16T03:36:01.070Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>史崇辰</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Numpy基础(一)</title>
    <link href="http://yoursite.com/2018/09/16/Numpy%E5%9F%BA%E7%A1%80-%E4%B8%80/"/>
    <id>http://yoursite.com/2018/09/16/Numpy基础-一/</id>
    <published>2018-09-16T03:34:02.000Z</published>
    <updated>2018-09-16T03:36:01.070Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Numpy的ndarray-一种多维数组对象"><a href="#Numpy的ndarray-一种多维数组对象" class="headerlink" title="Numpy的ndarray: 一种多维数组对象"></a>Numpy的ndarray: 一种多维数组对象</h3><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data = np.random.randn(<span class="number">2</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data</span><br></pre></td></tr></table></figure><pre><code>array([[-0.27145581,  0.20453947,  1.20194872],       [-0.02400358,  0.24259435, -0.65364157]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data * <span class="number">10</span></span><br></pre></td></tr></table></figure><pre><code>array([[-2.71455807,  2.04539469, 12.01948724],       [-0.24003576,  2.4259435 , -6.53641571]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data + data</span><br></pre></td></tr></table></figure><pre><code>array([[-0.54291161,  0.40907894,  2.40389745],       [-0.04800715,  0.4851887 , -1.30728314]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.shape</span><br></pre></td></tr></table></figure><pre><code>(2, 3)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.dtype</span><br></pre></td></tr></table></figure><pre><code>dtype(&#39;float64&#39;)</code></pre><h3 id="创建ndarray"><a href="#创建ndarray" class="headerlink" title="创建ndarray"></a>创建ndarray</h3><p>创建数组最简单的办法就是使用array函数. 它接受一切序列型的对象(包括其他数组), 然后产生一个新的含有传入数据的Numpy数组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data1 = [<span class="number">6</span>, <span class="number">7.5</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr1 = np.array(data1)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr1</span><br></pre></td></tr></table></figure><pre><code>array([6. , 7.5, 8. , 0. , 1. ])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data2 = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr2 = np.array(data2)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr2</span><br></pre></td></tr></table></figure><pre><code>array([[1, 2, 3, 4],       [5, 6, 7, 8]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr2.ndim</span><br></pre></td></tr></table></figure><pre><code>2</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr2.shape</span><br></pre></td></tr></table></figure><pre><code>(2, 4)</code></pre><p>np.array会自动推断生成数组的数据类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr1.dtype</span><br></pre></td></tr></table></figure><pre><code>dtype(&#39;float64&#39;)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr2.dtype</span><br></pre></td></tr></table></figure><pre><code>dtype(&#39;int64&#39;)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.zeros(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><pre><code>array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.zeros((<span class="number">3</span>, <span class="number">6</span>))</span><br></pre></td></tr></table></figure><pre><code>array([[0., 0., 0., 0., 0., 0.],       [0., 0., 0., 0., 0., 0.],       [0., 0., 0., 0., 0., 0.]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.empty((<span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>))</span><br></pre></td></tr></table></figure><pre><code>array([[[1.74618620e-076, 3.97062373e+246],        [1.16318408e-028, 2.21471564e+160],        [2.59982058e-056, 3.59853464e+179]],       [[5.93300900e-038, 5.04621361e+180],        [8.37170571e-144, 1.01849500e+248],        [1.16096643e-028, 5.30581644e+180]]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.arange(<span class="number">15</span>)</span><br></pre></td></tr></table></figure><pre><code>array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.ones(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><pre><code>array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])</code></pre><p>array默认复制所有输入数据; asarray, 如果输入已经是ndarray, 则不再复制</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">np.asarray(a)</span><br></pre></td></tr></table></figure><pre><code>array([1, 2, 3])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.eye(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><pre><code>array([[1., 0.],       [0., 1.]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.zeros_like(data2)</span><br></pre></td></tr></table></figure><pre><code>array([[0, 0, 0, 0],       [0, 0, 0, 0]])</code></pre><h3 id="ndarray的数据类型"><a href="#ndarray的数据类型" class="headerlink" title="ndarray的数据类型"></a>ndarray的数据类型</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">arr1 = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], dtype=np.float64)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr2 = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], dtype=np.int32)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr1.dtype</span><br></pre></td></tr></table></figure><pre><code>dtype(&#39;float64&#39;)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr2.dtype</span><br></pre></td></tr></table></figure><pre><code>dtype(&#39;int32&#39;)</code></pre><p>转换数组的数据类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.dtype</span><br></pre></td></tr></table></figure><pre><code>dtype(&#39;int64&#39;)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">float_arr = arr.astype(np.float64)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">float_arr.dtype</span><br></pre></td></tr></table></figure><pre><code>dtype(&#39;float64&#39;)</code></pre><p>在本例中, 整数被转换成了浮点数.如果浮点数转换成整数, 则小数部分将会被截取删除</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr = np.array([<span class="number">3.7</span>, <span class="number">-1.2</span>, <span class="number">-2.6</span>, <span class="number">0.5</span>, <span class="number">12.9</span>, <span class="number">10.1</span>])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr</span><br></pre></td></tr></table></figure><pre><code>array([ 3.7, -1.2, -2.6,  0.5, 12.9, 10.1])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.astype(np.int32)</span><br></pre></td></tr></table></figure><pre><code>array([ 3, -1, -2,  0, 12, 10], dtype=int32)</code></pre><p>如果某字符串数组表示全是数字, 也可以用astype将其转换成数值形式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numeric_strings = np.array([<span class="string">'1.25'</span>, <span class="string">'-9.6'</span>, <span class="string">'42'</span>], dtype=np.string_)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numeric_strings</span><br></pre></td></tr></table></figure><pre><code>array([b&#39;1.25&#39;, b&#39;-9.6&#39;, b&#39;42&#39;], dtype=&#39;|S4&#39;)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numeric_strings.astype(float)</span><br></pre></td></tr></table></figure><pre><code>array([ 1.25, -9.6 , 42.  ])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int_array = np.arange(<span class="number">10</span>)</span><br><span class="line">calibers = np.array([<span class="number">.22</span>, <span class="number">.270</span>, <span class="number">.357</span>, <span class="number">.380</span>, <span class="number">.44</span>, <span class="number">.50</span>], dtype = np.float64)</span><br><span class="line">int_array.astype(calibers.dtype)</span><br></pre></td></tr></table></figure><pre><code>array([0., 1., 2., 3., 4., 5., 6., 7., 8., 9.])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">empty_uint32 = np.empty(<span class="number">8</span>, dtype=<span class="string">'u4'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">empty_uint32</span><br></pre></td></tr></table></figure><pre><code>array([112, 111, 114,  97, 114, 105, 108, 121], dtype=uint32)</code></pre><p>使用astype时总是生成一个新的数组</p><h3 id="Numpy数组的运算"><a href="#Numpy数组的运算" class="headerlink" title="Numpy数组的运算"></a>Numpy数组的运算</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr = np.array([[<span class="number">1.</span>, <span class="number">2.</span>, <span class="number">3.</span>], [<span class="number">4.</span>, <span class="number">5.</span>, <span class="number">6.</span>]])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr</span><br></pre></td></tr></table></figure><pre><code>array([[1., 2., 3.],       [4., 5., 6.]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr * arr</span><br></pre></td></tr></table></figure><pre><code>array([[ 1.,  4.,  9.],       [16., 25., 36.]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr - arr</span><br></pre></td></tr></table></figure><pre><code>array([[0., 0., 0.],       [0., 0., 0.]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>/arr</span><br></pre></td></tr></table></figure><pre><code>array([[1.        , 0.5       , 0.33333333],       [0.25      , 0.2       , 0.16666667]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr ** <span class="number">0.5</span></span><br></pre></td></tr></table></figure><pre><code>array([[1.        , 1.41421356, 1.73205081],       [2.        , 2.23606798, 2.44948974]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr2 = np.array([[<span class="number">0.</span>, <span class="number">4.</span>, <span class="number">1.</span>], [<span class="number">7.</span>, <span class="number">2.</span>, <span class="number">12.</span>]])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr2</span><br></pre></td></tr></table></figure><pre><code>array([[ 0.,  4.,  1.],       [ 7.,  2., 12.]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr2 &gt; arr</span><br></pre></td></tr></table></figure><pre><code>array([[False,  True, False],       [ True, False,  True]])</code></pre><p>不同大小的数组之间的运算叫做广播</p><h3 id="基本的索引和切片"><a href="#基本的索引和切片" class="headerlink" title="基本的索引和切片"></a>基本的索引和切片</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr = np.arange(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr</span><br></pre></td></tr></table></figure><pre><code>array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr[<span class="number">5</span>]</span><br></pre></td></tr></table></figure><pre><code>5</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr[<span class="number">5</span>:<span class="number">8</span>]</span><br></pre></td></tr></table></figure><pre><code>array([5, 6, 7])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr[<span class="number">5</span>:<span class="number">8</span>] = <span class="number">12</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr</span><br></pre></td></tr></table></figure><pre><code>array([ 0,  1,  2,  3,  4, 12, 12, 12,  8,  9])</code></pre><p>如上所示, 当你将标量值赋值给一个切片时, 该值会自动传播到整个选区.跟列表最重要的区别在于, 数组切片是原始数组的视图. 这意味着数据不会被复制, 视图上的任何修改都会直接反映到原数组上.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr_slice = arr[<span class="number">5</span>:<span class="number">8</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr_slice</span><br></pre></td></tr></table></figure><pre><code>array([12, 12, 12])</code></pre><p>当改变arr_slice, 变化也会体现在原数组上</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr_slice[<span class="number">1</span>] = <span class="number">12345</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr</span><br></pre></td></tr></table></figure><pre><code>array([    0,     1,     2,     3,     4,    12, 12345,    12,     8,           9])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr_slice[:] = <span class="number">64</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr</span><br></pre></td></tr></table></figure><pre><code>array([ 0,  1,  2,  3,  4, 64, 64, 64,  8,  9])</code></pre><p>如果你想要得到的是ndarry切片的一份副本而非视图, 就需要明确地进行复制操作, 例如arr[5:8].copy()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr2d = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr2d[<span class="number">2</span>]</span><br></pre></td></tr></table></figure><pre><code>array([7, 8, 9])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr2d[<span class="number">0</span>][<span class="number">2</span>]</span><br></pre></td></tr></table></figure><pre><code>3</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr2d[<span class="number">0</span>, <span class="number">2</span>]</span><br></pre></td></tr></table></figure><pre><code>3</code></pre><p>轴0作为行, 轴1作为列</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr3d = np.array([[[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]], [[<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>], [<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>]]])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr3d</span><br></pre></td></tr></table></figure><pre><code>array([[[ 1,  2,  3],        [ 4,  5,  6]],       [[ 7,  8,  9],        [10, 11, 12]]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr3d[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><pre><code>array([[1, 2, 3],       [4, 5, 6]])</code></pre><p>标量和数组都可以传递给arr3d[0]:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">old_values = arr3d[<span class="number">0</span>].copy()</span><br><span class="line">arr3d[<span class="number">0</span>] = <span class="number">42</span></span><br><span class="line">In [<span class="number">48</span>]:</span><br><span class="line"></span><br><span class="line">arr3d</span><br></pre></td></tr></table></figure><pre><code>array([[[42, 42, 42],        [42, 42, 42]],       [[ 7,  8,  9],        [10, 11, 12]]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr3d[<span class="number">0</span>] = old_values</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr3d</span><br></pre></td></tr></table></figure><pre><code>array([[[ 1,  2,  3],        [ 4,  5,  6]],       [[ 7,  8,  9],        [10, 11, 12]]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr3d[<span class="number">1</span>, <span class="number">0</span>]</span><br></pre></td></tr></table></figure><pre><code>array([7, 8, 9])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x = arr3d[<span class="number">1</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x</span><br></pre></td></tr></table></figure><pre><code>array([[ 7,  8,  9],       [10, 11, 12]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><pre><code>array([7, 8, 9])</code></pre><p>在上面所有这些选取数组子集的例子中, 返回的数组都是视图</p><h4 id="布尔索引"><a href="#布尔索引" class="headerlink" title="布尔索引"></a>布尔索引</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">names = np.array([<span class="string">'Bob'</span>, <span class="string">'Joe'</span>, <span class="string">'Will'</span>, <span class="string">'Bob'</span>, <span class="string">'Will'</span>, <span class="string">'Joe'</span>, <span class="string">'Joe'</span>])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data = np.random.randn(<span class="number">7</span>, <span class="number">4</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">names</span><br></pre></td></tr></table></figure><pre><code>array([&#39;Bob&#39;, &#39;Joe&#39;, &#39;Will&#39;, &#39;Bob&#39;, &#39;Will&#39;, &#39;Joe&#39;, &#39;Joe&#39;], dtype=&#39;&lt;U4&#39;)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data</span><br></pre></td></tr></table></figure><pre><code>array([[ 0.33750495,  0.87858221, -1.17761082,  2.34847091],       [-0.13196555,  0.52047032,  0.4773208 ,  0.23596828],       [ 1.3720038 , -0.70659583, -0.23109342, -0.12345765],       [-0.34662676, -0.33928776, -1.42790341,  0.84134272],       [-0.15224377, -1.1089024 , -0.97038997,  0.56403746],       [-0.25892721, -0.60506496,  1.86708232,  0.132893  ],       [ 0.45939055, -0.28324557,  2.50077175, -0.22691978]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">names == <span class="string">'Bob'</span></span><br></pre></td></tr></table></figure><pre><code>array([ True, False, False,  True, False, False, False])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data[names==<span class="string">'Bob'</span>]</span><br></pre></td></tr></table></figure><pre><code>array([[ 0.33750495,  0.87858221, -1.17761082,  2.34847091],       [-0.34662676, -0.33928776, -1.42790341,  0.84134272]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data[names==<span class="string">'Bob'</span>, <span class="number">2</span>:]</span><br></pre></td></tr></table></figure><pre><code>array([[-1.17761082,  2.34847091],       [-1.42790341,  0.84134272]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data[names==<span class="string">'Bob'</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure><pre><code>array([2.34847091, 0.84134272])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">names != <span class="string">'Bob'</span></span><br></pre></td></tr></table></figure><pre><code>array([False,  True,  True, False,  True,  True,  True])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data[~(names == <span class="string">'Bob'</span>)]</span><br></pre></td></tr></table></figure><pre><code>array([[-0.13196555,  0.52047032,  0.4773208 ,  0.23596828],       [ 1.3720038 , -0.70659583, -0.23109342, -0.12345765],       [-0.15224377, -1.1089024 , -0.97038997,  0.56403746],       [-0.25892721, -0.60506496,  1.86708232,  0.132893  ],       [ 0.45939055, -0.28324557,  2.50077175, -0.22691978]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cond = names == <span class="string">'Bob'</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data[~cond]</span><br></pre></td></tr></table></figure><pre><code>array([[-0.13196555,  0.52047032,  0.4773208 ,  0.23596828],       [ 1.3720038 , -0.70659583, -0.23109342, -0.12345765],       [-0.15224377, -1.1089024 , -0.97038997,  0.56403746],       [-0.25892721, -0.60506496,  1.86708232,  0.132893  ],       [ 0.45939055, -0.28324557,  2.50077175, -0.22691978]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mask = (names == <span class="string">'Bob'</span>) | (names == <span class="string">'will'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data[mask]</span><br></pre></td></tr></table></figure><pre><code>array([[ 0.33750495,  0.87858221, -1.17761082,  2.34847091],       [-0.34662676, -0.33928776, -1.42790341,  0.84134272]])</code></pre><p>使用布尔值索引数据时, 总是生成数据的拷贝, 即使返回的数组并没有任何变化</p><p>Python的关键字and和or对布尔值数组并没有用, 请使用&amp;和|代替</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data[data&lt;<span class="number">0</span>] = <span class="number">0</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data</span><br></pre></td></tr></table></figure><pre><code>array([[0.33750495, 0.87858221, 0.        , 2.34847091],       [0.        , 0.52047032, 0.4773208 , 0.23596828],       [1.3720038 , 0.        , 0.        , 0.        ],       [0.        , 0.        , 0.        , 0.84134272],       [0.        , 0.        , 0.        , 0.56403746],       [0.        , 0.        , 1.86708232, 0.132893  ],       [0.45939055, 0.        , 2.50077175, 0.        ]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data[names!=<span class="string">'Joe'</span>] = <span class="number">7</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data</span><br></pre></td></tr></table></figure><pre><code>array([[7.        , 7.        , 7.        , 7.        ],       [0.        , 0.52047032, 0.4773208 , 0.23596828],       [7.        , 7.        , 7.        , 7.        ],       [7.        , 7.        , 7.        , 7.        ],       [7.        , 7.        , 7.        , 7.        ],       [0.        , 0.        , 1.86708232, 0.132893  ],       [0.45939055, 0.        , 2.50077175, 0.        ]])</code></pre><h4 id="神奇索引"><a href="#神奇索引" class="headerlink" title="神奇索引"></a>神奇索引</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr = np.empty((<span class="number">8</span>, <span class="number">4</span>))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">    arr[i] = i</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr</span><br></pre></td></tr></table></figure><pre><code>array([[0., 0., 0., 0.],       [1., 1., 1., 1.],       [2., 2., 2., 2.],       [3., 3., 3., 3.],       [4., 4., 4., 4.],       [5., 5., 5., 5.],       [6., 6., 6., 6.],       [7., 7., 7., 7.]])</code></pre><p>为了选出一个符合特定顺序的子集, 可以通过传递一个包含指明所需顺序的列表或数组来完成</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr[[<span class="number">4</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">6</span>]]</span><br></pre></td></tr></table></figure><pre><code>array([[4., 4., 4., 4.],       [3., 3., 3., 3.],       [0., 0., 0., 0.],       [6., 6., 6., 6.]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr[[<span class="number">-3</span>, <span class="number">-5</span>, <span class="number">-7</span>]]</span><br></pre></td></tr></table></figure><pre><code>array([[5., 5., 5., 5.],       [3., 3., 3., 3.],       [1., 1., 1., 1.]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr = np.arange(<span class="number">32</span>).reshape((<span class="number">8</span>, <span class="number">4</span>))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr</span><br></pre></td></tr></table></figure><pre><code>array([[ 0,  1,  2,  3],       [ 4,  5,  6,  7],       [ 8,  9, 10, 11],       [12, 13, 14, 15],       [16, 17, 18, 19],       [20, 21, 22, 23],       [24, 25, 26, 27],       [28, 29, 30, 31]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr[[<span class="number">1</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">2</span>], [<span class="number">0</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>]]</span><br></pre></td></tr></table></figure><pre><code>array([ 4, 23, 29, 10])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr[[<span class="number">1</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">2</span>]][:, [<span class="number">0</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>]]</span><br></pre></td></tr></table></figure><pre><code>array([[ 4,  7,  5,  6],       [20, 23, 21, 22],       [28, 31, 29, 30],       [ 8, 11,  9, 10]])</code></pre><p>神奇索引和切片不同, 它总是将数据复制到一个新的数组中</p><h4 id="数组转置和换轴"><a href="#数组转置和换轴" class="headerlink" title="数组转置和换轴"></a>数组转置和换轴</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr = np.arange(<span class="number">15</span>).reshape((<span class="number">3</span>, <span class="number">5</span>))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr</span><br></pre></td></tr></table></figure><pre><code>array([[ 0,  1,  2,  3,  4],       [ 5,  6,  7,  8,  9],       [10, 11, 12, 13, 14]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.T</span><br></pre></td></tr></table></figure><pre><code>array([[ 0,  5, 10],       [ 1,  6, 11],       [ 2,  7, 12],       [ 3,  8, 13],       [ 4,  9, 14]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr = np.random.randn(<span class="number">6</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr</span><br></pre></td></tr></table></figure><pre><code>array([[-0.34408898, -1.37979923, -1.31569516],       [ 0.4300182 ,  0.53458254,  2.31329317],       [ 0.91202655, -0.8713753 ,  0.69748309],       [ 1.80515511, -0.30402588,  0.59708737],       [-0.72718466,  1.16915288, -1.35944484],       [ 0.70524754, -0.82653288, -0.23491233]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.dot(arr.T, arr)</span><br></pre></td></tr></table></figure><pre><code>array([[ 7.34791663, -1.02712211,  2.08288264],       [-1.02712211, 13.10926223,  3.60236728],       [ 2.08288264,  3.60236728,  5.8434541 ]])</code></pre><p>换轴</p><p>对于高维数组, transpose需要用到一个由轴编号组成的元组, 才能进行转置</p><p><strong>对多维数组来说, 确定最底层的一个基本元素位置需要用到的索引个数是维度</strong>. 这里可以理解为对shape返回元组的索引</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr = np.arange(<span class="number">16</span>).reshape((<span class="number">2</span>, <span class="number">2</span>, <span class="number">4</span>))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr</span><br></pre></td></tr></table></figure><pre><code>array([[[ 0,  1,  2,  3],        [ 4,  5,  6,  7]],       [[ 8,  9, 10, 11],        [12, 13, 14, 15]]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.transpose((<span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>))</span><br></pre></td></tr></table></figure><pre><code>array([[[ 0,  1,  2,  3],        [ 8,  9, 10, 11]],       [[ 4,  5,  6,  7],        [12, 13, 14, 15]]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.swapaxes(<span class="number">1</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><pre><code>array([[[ 0,  4],        [ 1,  5],        [ 2,  6],        [ 3,  7]],       [[ 8, 12],        [ 9, 13],        [10, 14],        [11, 15]]])</code></pre><p>swapaxes返回的是数据的视图. 而没有对数据进行复制</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Numpy的ndarray-一种多维数组对象&quot;&gt;&lt;a href=&quot;#Numpy的ndarray-一种多维数组对象&quot; class=&quot;headerlink&quot; title=&quot;Numpy的ndarray: 一种多维数组对象&quot;&gt;&lt;/a&gt;Numpy的ndarray: 一种多维数组对象&lt;/h3&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>机器学习基石 2.学习判断是与非</title>
    <link href="http://yoursite.com/2018/09/10/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%9F%B3-2-%E5%AD%A6%E4%B9%A0%E5%88%A4%E6%96%AD%E6%98%AF%E4%B8%8E%E9%9D%9E/"/>
    <id>http://yoursite.com/2018/09/10/机器学习基石-2-学习判断是与非/</id>
    <published>2018-09-10T15:34:08.000Z</published>
    <updated>2018-09-11T05:25:05.209Z</updated>
    
    <content type="html"><![CDATA[<h3 id="感知机假设集合"><a href="#感知机假设集合" class="headerlink" title="感知机假设集合"></a>感知机假设集合</h3><a id="more"></a><p>第一章里讲到机器学习的核心就是, 使用算法$\mathcal{A}$接受数据$\mathcal{D}$, 从假设集合(所有可能性)$\mathcal{H}$中选出一个$g$, 希望$g \approx f$. 那么我们现在最关心的就是, $\mathcal{H}$应该是什么样的.</p><p>以之前提到的银行审核发放信用卡的场景为例, 假设我们把每个使用者定义为向量$\bf x$, 包含$d$个维度, 例如$x_1$代表年龄, $x_2$代表年薪, 等等. 我们可以将这些维度综合起来给使用者一个整体的分数. 如果这个分数超过了某个标准, 那么就发放信用卡; 否则拒绝发放. 这样, 我们需要给每个$x_i, i \in \{ 1, \ldots, d \}$来赋一个系数$w_i$, 如果特征对最后的影响是正面的,  那么就给$w_i$正值, 否则给负值. 如果我们在规定一个阈值$\rm threshold$, 那么我们的决策方法就可以写成为, 如果</p><script type="math/tex; mode=display">\sum_{i=1}^d w_ix_i > \rm threshold</script><p>, 就批准信用卡申请, 否则就拒绝.</p><p>我们可以进一步地规定输出空间$\mathcal{Y} \in \{-1, +1\}$, 其中$y=-1$时表示拒绝, $y=1$时表示许可. 这样做的好处是我们可以直接使用$\rm sign$函数来求出$y$的值, 具体地说, 假设集合$\mathcal{H}$中的每个元素$h \in \mathcal{H}$都有如下形式</p><script type="math/tex; mode=display">h(\bf x) ={\rm sign}((\sum_{i=1}^d w_ix_i) - {\rm threshold})</script><p>其中${\rm sign}$函数的定义为</p><script type="math/tex; mode=display">{\rm sign}(x) = \begin{cases} +1 & {\rm if \ } x>0 \\ -1 & {\rm if \ } x<0 \end{cases}</script><p>即对用户的所有属性做一个加权打分, 看它是否超过阈值. 如果超过, 则批准; 否则就拒绝(如果正好等于阈值, 这种情况很少发生, 甚至可以随机决定$y$是$-1$还是$1$).</p><p>这里我们说$\mathcal{H}$是一个集合的原因是, 不同的$\bf w$和$\rm threshold$都对应了不同的$h$, 所有这些可能性对应的所有$h$构成了最后的假设集合$\mathcal{H}$. $h$这样的函数类型称为<strong>感知机(perceptron)</strong>, 其中$\bf w$称为权重. 进一步地, 假设我们把$-\rm threshold$看做是$(-\rm threshold) \cdot (+1)$, 然后把$+1$看作是$x_0$, 那么前面的公式形式可以进一步的简化, 即</p><script type="math/tex; mode=display">\begin{align*}h({\bf x}) &= {\rm sign}((\sum_{i=1}^d w_ix_i) - {\rm threshold}) \\&= {\rm sign}((\sum_{i=1}^d w_ix_i)+\underbrace{(-{\rm threshold})}_{w_0}\cdot \underbrace{(+1)}_{x_0}) \\&= {\rm sign}(\sum_{i=0}^d w_ix_i) \\&= {\rm sign}({\bf w}^\mathsf{T}{\bf x}) \end{align*}</script><p>这里$\bf w$和$\bf x$都看作是列向量, 即维度为$(d+1)1$</p><p>我们可以通过一个图例来加强理解. 假如我们顾客的特征数(也就是前面说的属性维度)为$2$, 那么我们可以把任意输入$\bf x$画在一个平面$\mathbb{R}^2$上(类似的, 如果特征数为$d$, 那么每个输入$\bf x$都可以在$\mathbb{R}^d$空间表示, 只是会对我们的可视化造成困难), 每个输入对应平面上的一个点. 这样, $\mathbb{R}^2$上的$h$都有如下形式:</p><script type="math/tex; mode=display">h(\bf x) = \rm sign(w_0+w_1x_1+w_2x_2)</script><p>可以看出, 每个$h$其实都对应了$\mathbb{R}^2$上的一条直线. 感知机规定位于直线某一侧的样本都被判定为正例, 另一侧的样本都被判定为负例. 不同的权重会产生不同的分类方式. 假设我们用蓝色的圈o表示正例, 红色的叉×表示负例, 下图给出了两个不同的感知机</p><p><img src="/2018/09/10/机器学习基石-2-学习判断是与非/1.png" alt="1"></p><p><img src="/2018/09/10/机器学习基石-2-学习判断是与非/2.png" alt="2"></p><p>可以看出来右边的感知机在训练集上效果更好, 因为它对所有例子做出了正确分类. 而左侧的感知机在训练集上表现稍逊(一个正例被误判为负, 两个负例被误判为正)</p><p>由于感知机都对应于一个超平面, 因此它也被称为是<strong>线性分类器</strong>($\mathbb R_2$的超平面是一条直线, $\mathbb R_3$的超平面是一个平面, 以此类推).</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;感知机假设集合&quot;&gt;&lt;a href=&quot;#感知机假设集合&quot; class=&quot;headerlink&quot; title=&quot;感知机假设集合&quot;&gt;&lt;/a&gt;感知机假设集合&lt;/h3&gt;
    
    </summary>
    
      <category term="课程笔记" scheme="http://yoursite.com/categories/%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="机器学习" scheme="http://yoursite.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/09/09/hello-world/"/>
    <id>http://yoursite.com/2018/09/09/hello-world/</id>
    <published>2018-09-09T07:57:37.546Z</published>
    <updated>2018-09-09T07:57:37.546Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>机器学习基石 1.学习问题</title>
    <link href="http://yoursite.com/2018/09/09/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%9F%B3-1-%E5%AD%A6%E4%B9%A0%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2018/09/09/机器学习基石-1-学习问题/</id>
    <published>2018-09-09T03:48:35.000Z</published>
    <updated>2018-09-09T08:17:36.707Z</updated>
    
    <content type="html"><![CDATA[<h3 id="机器学习的概念"><a href="#机器学习的概念" class="headerlink" title="机器学习的概念"></a>机器学习的概念</h3><a id="more"></a><p>我们可以从人类的学习思维入手. 人类的学习过程, 是从观察出发, 经过大脑内化以后, 变成有用的技巧. 机器学习, 类似地, 是我们希望让计算机模拟人类的学习过程. 这时, 计算机观察到的东西被称作<strong>数据</strong>, 而思考过程实际上是<strong>计算过程</strong>, 技巧则是<strong>提高某一方面的表现</strong>. 因此,</p><p><img src="/2018/09/09/机器学习基石-1-学习问题/1.png" alt="机器学习的过程"></p><p>为什么需要机器学习?</p><p>给定一张照片, 判断照片里的物体是不是一棵树. 使用传统的方法, 就需要对”什么是树”做出回答, 给出树的定义, 将其实现为程序. 按照规则进行判断, 并将其表述出来是很困难的. 然而, 一个小孩认识树的方法其实是通过观察, 经过经验的积累判断这个是树或者不是, 并不是教条的从长辈那里学习判断规则. 类似地, 我们可以让计算机自己从数据中学习树的判断方法. 因此, <strong>机器学习是构建复杂系统的一种方法</strong></p><p>机器学习的使用场景</p><ul><li><p>当我们不能提前想好各种情况, 手工编码规则时. 例如让机器人在火星上导航, 我们不可能提前想到它在火星上会遇到什么样的情况</p></li><li><p>当我们无法轻易地定义问题的解决方案时. 例如要做语音识别/视觉识别, 我们无法对音频信号做出准确定义</p></li><li><p>当人们需要做出快速决策时. 例如高频交易</p></li><li><p>当要让机器服务于海量用户时. 例如做服务个性化定制</p></li></ul><p>因此, 可以从以下三个关键点进行判断, 看是否适合使用机器学习</p><ol><li>问题是”可以学习的”, 即存在一些潜在的模式, 以至于性能可以被提高</li><li>这些规则难以清晰定义</li><li>手里掌握对应的数据</li></ol><h3 id="机器学习的应用"><a href="#机器学习的应用" class="headerlink" title="机器学习的应用"></a>机器学习的应用</h3><p>机器学习在衣食住行四个方面都得到了广泛地应用</p><ul><li><p>衣:  Abu-Mostafa 2012利用销售数据和对用户的调研结果构建推荐系统给用户推荐穿搭</p></li><li><p>食: Sadilek et al. 2013利用机器学习, 根据Twitter数据, 来判断餐厅的好坏</p></li><li><p>住: Tsanas and Xifara 2012利用已有房间的特点和耗能, 预测房屋的能用消耗</p></li></ul><p>此外还有两个领域: 教育和娱乐</p><ul><li>教育: 系统根据学生的答题情况, 有针对地提供题目让学生练习其薄弱的部分, 同时将太难的题推后给出. 即, 给定一名学生的答题历史和一个题目, 预测学生是否能做对这道题( KDDCup 2010 )</li><li>娱乐: 系统根据用户的历史打分, 预测用户对新电影的打分( KDDCup 2011 )</li></ul><h3 id="机器学习的过程"><a href="#机器学习的过程" class="headerlink" title="机器学习的过程"></a>机器学习的过程</h3><h4 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h4><p>以银行信用卡发卡这一问题为例. 假设银行收集了一些用户的基本信息, 例如下表</p><div class="table-container"><table><thead><tr><th>特征</th><th>值</th></tr></thead><tbody><tr><td>年龄</td><td>23</td></tr><tr><td>性别</td><td>女</td></tr><tr><td>所在地居住年数</td><td>1</td></tr><tr><td>工龄</td><td>0.5</td></tr><tr><td>负债额</td><td>200,000</td></tr></tbody></table></div><p>银行要解决的问题是, 对于这样的客户, 是否应该给她发放信用卡</p><h4 id="问题形式化描述"><a href="#问题形式化描述" class="headerlink" title="问题形式化描述"></a>问题形式化描述</h4><p>为了更加形式化地描述这个问题, 需要先定义一些符号:</p><ul><li><strong>输入</strong>: ${\bf x} \in \mathcal{X}$, 用户的特征</li><li><strong>输出</strong>: ${\bf y} \in \mathcal{Y}$, 是否发放信用卡</li><li><strong>目标函数</strong>: $f: \mathcal{X} \rightarrow \mathcal{Y}$, 是我们期望学到, 但是目前不知道的东西. 是最理想的公式</li><li><strong>数据</strong>: $\mathcal{D} = {({\bf x}_1, y_1), ({\bf x}_2, y_2), \ldots, ({\bf x}_n, y_n)}$, 是之前积累的记录</li><li><strong>假设</strong>: $g: \mathcal{X} \rightarrow \mathcal{Y}$, 是机器从数据中学到的函数. 我们通常都希望$g$的表现足够好, 即$g \approx f$. 注意这里$g$不一定等于$f$(实际上, 我们永远也无法知道真正的$f$是什么样子, 只知道由$f$产生的数据$\mathcal{D}$)</li><li><strong>机器学习算法</strong>: $\mathcal {A}$, 是由$\mathcal {D}$产生$g$的算法, 可以理解为$\mathcal {A}$会从各种不同假设$h_k$(这里$h_k$有好有坏)构成的集合$\mathcal{H}$中挑选出来一个最好的$g$, 使得$g \approx f$. 即$\mathcal{A}$以$\mathcal{D}$和$\mathcal{H}$为输入, 以$g$为输出</li></ul><p><img src="/2018/09/09/机器学习基石-1-学习问题/2.png" alt="机器学习过程"></p><p><strong>我们所讲的机器学习模型, 指的就是</strong>$\mathcal{A}$和$\mathcal{H}$</p><p>在有个这些记号以后, 我们可以重新给机器学习下一个定义</p><blockquote><p>机器学习是使用数据计算假设$g$以逼近目标函数$f$的过程</p></blockquote><h3 id="机器学习与其它名词"><a href="#机器学习与其它名词" class="headerlink" title="机器学习与其它名词"></a>机器学习与其它名词</h3><h4 id="机器学习与数据挖掘"><a href="#机器学习与数据挖掘" class="headerlink" title="机器学习与数据挖掘"></a>机器学习与数据挖掘</h4><p>数据挖掘的一个简单定义是使用海量数据, 在其中找出一些有趣的现象或性质. 这里, 如果”有用的性质”就是”能够逼近目标函数的假设”, 那么数据挖掘和机器学习是没有区别的.  如果”有用的性质”与”假设”是相关联的, 那么数据挖掘在很大程度上可以帮助机器学习</p><p>传统上的数据挖掘还关注如何在大的数据集中进行有效计算, 不过现在已经很难将机器学习和数据挖掘这两个概念分开了. </p><h4 id="机器学习与人工智能"><a href="#机器学习与人工智能" class="headerlink" title="机器学习与人工智能"></a>机器学习与人工智能</h4><p>人工智能要求计算机呈现出一些智能的行为. 由于机器学习逼近目标函数的过程就展示了一些智能, 因此我们可以说, 机器学习是实现人工智能的一种手段.</p><h4 id="机器学习与统计学"><a href="#机器学习与统计学" class="headerlink" title="机器学习与统计学"></a>机器学习与统计学</h4><p>统计学是使用数据来对未知过程进行推论. 考虑到假设$g$是推论结果, $f$是不知道的事, 那么可以说统计是实现机器学习的一种方法. 但是传统的统计学从数学出发, 很多工具是为数学假设提供证明和推论. 而机器学习看重的是如何计算出结果. 总而言之, 统计学为机器学习提供了很多有力的工具</p><blockquote><p>+参考 <a href="http://txshi-mt.com/2017/08/01/NTUML-1-the-Learning-Problem/txshi-mt.com/2017/08/01/NTUML-1-the-Learning-Problem/" target="_blank" rel="noopener">txshi-mt.com/2017/08/01/NTUML-1-the-Learning-Problem/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;机器学习的概念&quot;&gt;&lt;a href=&quot;#机器学习的概念&quot; class=&quot;headerlink&quot; title=&quot;机器学习的概念&quot;&gt;&lt;/a&gt;机器学习的概念&lt;/h3&gt;
    
    </summary>
    
      <category term="课程笔记" scheme="http://yoursite.com/categories/%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="机器学习" scheme="http://yoursite.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
</feed>
